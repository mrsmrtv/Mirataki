import requests
import time
import json
import os
import random
import hashlib


# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò --------------------

TOKEN = "7126743161:AAFaYItWP5tQ8UZyq0B9jLC1bjQqxAD847g"
URL = f"https://api.telegram.org/bot{TOKEN}/"
MODERATOR_ID = 5425161302
RAFFLE_STATE_FILE = "raffle_state.json"

# -------------------- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• --------------------
def generate_short_id(file_id):
    return hashlib.md5(file_id.encode()).hexdigest()[:10]


def load_json(filename):
    if os.path.exists(filename):
        with open(filename, "r") as f:
            return json.load(f)
    return {}

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f)

users = load_json("users.json")
pending = load_json("photos_pending.json")
checkins = load_json("checkins.json")
raffle_state = load_json(RAFFLE_STATE_FILE)

# -------------------- API --------------------

def get_updates(offset=None):
    params = {"timeout": 100, "offset": offset}
    return requests.get(URL + "getUpdates", params=params).json()

def send_message(chat_id, text, reply_markup=None):
    data = {"chat_id": chat_id, "text": text}
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)
    requests.post(URL + "sendMessage", data=data)

def send_photo(chat_id, photo_id, caption="", reply_markup=None):
    print(f"üì® –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ {photo_id} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç {chat_id}")
    data = {
        "chat_id": chat_id,
        "photo": photo_id,
        "caption": caption
    }
    if reply_markup:
        data["reply_markup"] = json.dumps(reply_markup)

    response = requests.post(URL + "sendPhoto", data=data)
    if not response.ok:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ:", response.text)
    else:
        print("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")


# -------------------- –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û --------------------

def handle_photo(user_id, chat_id, photo_id):
    if user_id not in users:
        users[user_id] = {"coins": 0, "invited": [], "raffle": False, "registered": False}

    if user_id in checkins and photo_id in checkins[user_id]:
        send_message(chat_id, "‚ùó –¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —ç—Ç–æ —Ñ–æ—Ç–æ.")
        return

    short_id = generate_short_id(photo_id)
    pending[short_id] = {"user_id": user_id, "chat_id": chat_id, "photo_id": photo_id}

    save_json("photos_pending.json", pending)
    send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

    # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    keyboard = {
    "inline_keyboard": [[
        {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"approve:{short_id}"},
        {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject:{short_id}"}
    ]]
    }
    send_message(MODERATOR_ID, f"üÜï –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. file_id: {photo_id}")
    send_photo(MODERATOR_ID, photo_id, caption=f"üïµÔ∏è –§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", reply_markup=keyboard)

    

# -------------------- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê --------------------

def get_main_keyboard(is_moderator=False):
    if is_moderator:
        return {
            "keyboard": [[
                {"text": "üì• –ú–æ–¥–µ—Ä–∞—Ü–∏—è"},
                {"text": "üöÄ –ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"},
                {"text": "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"}
            ]],
            "resize_keyboard": True
        }
    else:
        return {
            "keyboard": [[
                {"text": "üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"},
                {"text": "üí∞ –ë–∞–ª–∞–Ω—Å"},
            ], [
                {"text": "üéÅ –†–æ–∑—ã–≥—Ä—ã—à"},
                {"text": "üìç –ú–µ—Å—Ç–∞"}
            ], [
                {"text": "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞"}
            ]],
            "resize_keyboard": True
        }


def handle_text(user_id, chat_id, text):
    is_moderator = (str(user_id) == str(MODERATOR_ID))

    if user_id not in users:
        users[user_id] = {"coins": 0, "invited": [], "raffle": False, "registered": False}

    if text == "/start":
        is_moderator = (str(user_id) == str(MODERATOR_ID))
        send_message(chat_id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mirataki!", reply_markup=get_main_keyboard(is_moderator))



    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        coins = users[user_id]["coins"]
        send_message(chat_id, f"üí∞ –£ —Ç–µ–±—è {coins} CityCoin.")

    elif text == "üìç –ú–µ—Å—Ç–∞":
        msg = "üìç –¢–æ—á–∫–∏ –≥–æ—Ä–æ–¥–∞ –ê–ª–º–∞—Ç—ã:\n1. –ö–æ–∫ –¢–æ–±–µ\n2. –ü–∞—Ä–∫ –ü–µ—Ä–≤–æ–≥–æ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞\n3. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ú—É–∑–µ–π\n4. –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ"
        send_message(chat_id, msg)

    elif text == "üéÅ –†–æ–∑—ã–≥—Ä—ã—à":
        if users[user_id].get("registered", False):
            send_message(chat_id, "üì¢ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à!")
        elif users[user_id]["coins"] >= 1000:
            users[user_id]["coins"] -= 1000
            users[user_id]["registered"] = True
            save_json("users.json", users)
            send_message(chat_id, "‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à. –ñ–¥–∏ –Ω–∞—á–∞–ª–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!")
        else:
            send_message(chat_id, "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1000 CityCoin –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

    elif text == "üë´ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞":
        link = f"https://t.me/MiratakiBot?start={user_id}"
        send_message(chat_id, f"üîó –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–æ–º: {link}\n–í—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ!")
    elif is_moderator and text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à":
        if raffle_state.get("active", False):
            send_message(chat_id, "‚ö†Ô∏è –†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∏–¥—ë—Ç!")
        else:
            raffle_state["active"] = True
            save_json(RAFFLE_STATE_FILE, raffle_state)
            send_message(chat_id, "üöÄ –†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è! –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–≤—É—é—Ç!")

    elif is_moderator and text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à":
        if not raffle_state.get("active", False):
            send_message(chat_id, "‚ö†Ô∏è –†–æ–∑—ã–≥—Ä—ã—à –µ—â—ë –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç.")
        else:
            participants = [uid for uid, u in users.items() if u.get("registered")]
            if not participants:
                send_message(chat_id, "üë• –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
            else:
                winner = random.choice(participants)
                users[winner]["coins"] += 1000
                for uid in participants:
                    users[uid]["registered"] = False
                save_json("users.json", users)
                send_message(chat_id, f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {winner}! –û–Ω –ø–æ–ª—É—á–∞–µ—Ç 1000 CityCoin üéâ")
                for uid in participants:
                    if str(uid) != str(winner):
                        send_message(uid, "üé≤ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!")
            raffle_state["active"] = False
            save_json(RAFFLE_STATE_FILE, raffle_state)


# -------------------- –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK --------------------

def handle_callback(query):
    data = query["data"]
    user_id = str(query["from"]["id"])
    message = query["message"]
    chat_id = message["chat"]["id"]
    msg_id = message["message_id"]

    if user_id != str(MODERATOR_ID):
        return

    if data.startswith("approve:"):
        photo_id = data.split(":")[1]
        if photo_id in pending:
            target_id = pending[photo_id]["user_id"]
            target_chat = pending[photo_id]["chat_id"]
            users[target_id]["coins"] += 100
            checkins.setdefault(target_id, []).append(photo_id)
            send_message(target_chat, "‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ! +100 CityCoin üéâ")
            send_message(chat_id, f"üëç –§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ.\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_id}\nüì∏ Photo ID: {photo_id}\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {users[target_id]['coins']}")
            del pending[photo_id]
            save_json("users.json", users)
            save_json("checkins.json", checkins)
            save_json("photos_pending.json", pending)

    elif data.startswith("reject:"):
        photo_id = data.split(":")[1]
        if photo_id in pending:
            target_id = pending[photo_id]["user_id"]
            target_chat = pending[photo_id]["chat_id"]
            send_message(target_chat, "‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            send_message(chat_id, f"üóë –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target_id}\nüì∏ Photo ID: {photo_id}")
            del pending[photo_id]
            save_json("photos_pending.json", pending)

# -------------------- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ --------------------

def main():
    last_update_id = None
    print("ü§ñ MiratakiBot –∑–∞–ø—É—â–µ–Ω...")

    while True:
        updates = get_updates(last_update_id)
        for update in updates.get("result", []):
            if "callback_query" in update:
                handle_callback(update["callback_query"])
            else:
                message = update.get("message")
                if message:
                    user_id = str(message["from"]["id"])
                    chat_id = message["chat"]["id"]

                    if "photo" in message:
                        photo_id = message["photo"][-1]["file_id"]
                        handle_photo(user_id, chat_id, photo_id)

                    elif "text" in message:
                        handle_text(user_id, chat_id, message["text"])

                    last_update_id = update["update_id"] + 1

        time.sleep(1)

if __name__ == "__main__":
    main()
